export default {
  // Published version contains a licensing comment and some sponsorship info
  // in package.json that is missing from the source. Inconsequential.
  "safe-buffer": ["5.2.1"],

  // resolve v1 ships with a "core.json" file that identifies which packages are
  // "core modules" of Node (to be removed in v2 in favour of
  // https://github.com/inspect-js/is-core-module). In v1.22.10, one version
  // range in core.json was updated to match the change from
  // https://github.com/inspect-js/is-core-module/commit/aafb7cae0976ecfb156bc563dde57ca8fd838d0c
  // without that change being committed to source control. Innocuous.
  resolve: ["1.22.10"],

  // Maintainer accidentally published his /.idea folder (IDE config outside
  // source control).
  "iconv-lite": ["0.6.3"],

  // Gets published with Lerna, and I don't know how to repro Lerna's packing
  // process without publishing & without creating a new commit.
  // Published version has two innocuous differences: presence of a `LICENSE`
  // file and inclusion of `gitHead` key in package.json.
  "pretty-format": [
    "30.0.2",

    // In addition to the points above, 30.0.5 also has an index.t.mts file
    // that doesn't seem to be generated by the build process when I run it.
    "30.0.5",
  ],

  // TODO: This one is kinda sketch. The differences in legacy.js LOOK to me
  //       like they're caused by some difference in Babel version / Babel
  //       plugin version / etc, but there are enough that it's a bit of work
  //       to verify that there isn't something evil being smuggled in, and I
  //       haven't fully done that.
  //       Return to this on next publish?
  ignore: ["7.0.5"],

  // A load of docs and config gets excluded from the published package via
  // some undocumented process. Whatever.
  postcss: ["8.5.6"],

  // A build step for updating a "version" variable in some code is erroneously
  // set to run only on publish, not on pack, so doesn't fire when we do our
  // own build.
  "eslint-scope": ["8.4.0"],

  // pnpm reorders package.json keys for some reason
  ms: ["2.1.3"],

  // TODO: Another sketchy one. Looks like browserify (probably uglifyify) is
  //       outputting functions in a different order to the published version,
  //       but dunno why and is hard to audit at a glance.
  qs: ["6.14.0"],
};
